(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{wg:()=>b,xA:()=>d,Cs:()=>v,C_:()=>n,iu:()=>r,yk:()=>l,CW:()=>i,oW:()=>o,bj:()=>h,O9:()=>p,ON:()=>_,N_:()=>u,Ht:()=>a,qj:()=>m,f:()=>g,Ph:()=>f,t1:()=>s,Ag:()=>c,ZQ:()=>y});var n={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_invalid",inputErrorClass:"form__input-border-error",errorClass:"form__input"},r=document.querySelector('.form[name = "formRedactAvatar"]'),o=document.querySelector('.form[name = "formRedactProfile"]'),i=document.querySelector('.form[name = "formNewCard"]'),a=document.querySelector(".popup_delete"),u=document.querySelector(".popup_avatar"),c=document.querySelector(".profile__title"),s=document.querySelector(".profile__subtitle"),l=document.querySelector(".profile__edit-button"),f=document.querySelector(".popup_profile"),p=document.querySelector(".form__input_type_name"),h=document.querySelector(".form__input_type_role"),d=document.querySelector(".profile__vector-button"),_=document.querySelector(".popup_images"),y=".elements",m=document.querySelector(".popup_img"),v="#tmplt",b=document.querySelector(".form__input_type_avatar"),g=document.querySelector(".profile__jack");function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._configValidation=t,this._formSelector=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._formSelector.addEventListener("submit",(function(e){e.preventDefault()})),this._handleFormInput()}},{key:"_handleFormInput",value:function(){var e=this;this._inputList=Array.from(this._formSelector.querySelectorAll(this._configValidation.inputSelector)),this.setSubmitButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._setCastomError(t),e.setSubmitButtonState()}))}))}},{key:"_setCastomError",value:function(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}},{key:"_setFieldError",value:function(e){this._formSelector.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage}},{key:"_showError",value:function(e){this._setFieldError(e),e.classList.add(this._configValidation.inputErrorClass)}},{key:"_hideError",value:function(e){this._setFieldError(e),e.classList.remove(this._configValidation.inputErrorClass)}},{key:"setSubmitButtonState",value:function(){this._button=this._formSelector.querySelector(this._configValidation.submitButtonSelector);var e=this._formSelector.checkValidity();e&&(this._button.classList.remove(this._configValidation.inactiveButtonClass),this._button.removeAttribute("disabled")),e||(this._button.classList.add(this._configValidation.inactiveButtonClass),this._button.setAttribute("disabled","disabled"))}}])&&k(t.prototype,n),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function(){function e(t,n,r,o,i,a,u){var c=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),E(this,"createCard",(function(){return c._element=c._getTemplate(),c._removeButtonDelete(c),c._setEventListeners(),c.setLikeCard(c),c._element.querySelector(".element__img").src=c._link,c._element.querySelector(".element__img").alt=c._name,c._element.querySelector(".element__title").textContent=c._name,c._element})),E(this,"deleteCard",(function(e){return c._popupDeleteCard(c)})),E(this,"removeCard",(function(e){c._element.remove()})),E(this,"_likeCard",(function(){c._elementGroup.classList.toggle("element__group_active")})),this._name=t.name,this._link=t.link,this._cardSelector=n,this._open=r,this._popupDeleteCard=o,this._hendleCardDelet=i,this._cardId=t._id,this._owner=t.owner._id,this._userId="b801fba7bd7ef0fa0591f054",this._likes=t.likes,this._myId=t.myId,this._hendleCardLike=a,this._api=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return this._element=document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._elementGroup=this._element.querySelector(".element__group"),this._elementGroup.addEventListener("click",this.setLikeCard),this._element.querySelector(".element__img").addEventListener("click",(function(){e._open()})),this._element.querySelector(".element__delete").addEventListener("click",this.deleteCard),this._elementLike=this._element.querySelector(".element__like_number")}},{key:"_removeButtonDelete",value:function(){this._owner!==this._userId&&(this._element.querySelector(".element__delete").style.display="none")}},{key:"setLikeCard",value:function(){var e=this;this._isLiked=this._likes.filter((function(){return e._userId===e._owner})).length>0,this._elementLike.textContent=this._likes.length,this._isLiked?this._elementGroup.classList.add("element__group_active"):this._elementGroup.classList.remove("element__group_active")}},{key:"isLiked",value:function(){return this._isLiked}},{key:"cardId",value:function(){return this._cardId}}])&&w(t.prototype,n),e}();function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n,r){var o,i,a=this,u=t.items,c=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i=function(e){a._api.addTask(e).then((function(e){a.addItem(e)})).catch((function(){console.log("Карточка не добавилась")}))},(o="saveItem")in this?Object.defineProperty(this,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[o]=i,this._items=u,this._renderer=c,this._sectionElements=n,this._api=r}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(e){document.querySelector(this._sectionElements).prepend(e)}}])&&C(t.prototype,n),e}();function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){t.target===t.currentTarget&&e.close()}))}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}}])&&j(t.prototype,n),e}();function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return(q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var U=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(r);if(o){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return B(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupCardImage=t._popup.querySelector(".popup__img"),t._captionImage=t._popup.querySelector(".popup__title"),t}return t=a,(n=[{key:"open",value:function(e,t){q(x(a.prototype),"open",this).call(this),this._popupCardImage.alt=e,this._captionImage.textContent=e,this._popupCardImage.src=t}}])&&T(t.prototype,n),a}(P);function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return(D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=G(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=G(r);if(o){var n=G(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._saveNewCard=t,n._buttonSubmit=n._popup.querySelector(".form__button"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;D(G(a.prototype),"setEventListeners",this).call(this,this._popup),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._saveNewCard(e._getInputValues())}))}},{key:"close",value:function(){D(G(a.prototype),"close",this).call(this,this._popup),this._popup.querySelector(".form").reset()}},{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._popup.querySelectorAll(".form__input"),this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setButtonText",value:function(e){this._buttonSubmit.textContent=e?"Сохранение...":"Сохранить"}}])&&V(t.prototype,n),a}(P);function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=t,this._profileJob=n,this._profileAvatar=r,this.name="",this.about="",this.avatar=""}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this.name,about:this.about}}},{key:"getUserAvatar",value:function(){return{avatar:this.avatar}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about,r=e.avatar;this.name=t,this.about=n,this.avatar=r}},{key:"updataUserInfo",value:function(){this._profileName.textContent=this.name,this._profileJob.textContent=this.about}},{key:"updataUserAvatar",value:function(){this._profileAvatar.src=this.avatar}}])&&M(t.prototype,n),e}();function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=function(){function e(t){var n,r,o=t.url,i=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},(n="_handleResponse")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this.url=o,this.headers=i}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this.url,"/cards"),{method:"GET",headers:this.headers}).then(this._handleResponse).catch(this._catchError)}},{key:"addTask",value:function(e){return fetch("".concat(this.url,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"deleteTask",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then(this._handleResponse)}},{key:"getUserInfo",value:function(){return fetch("".concat(this.url,"/users/me"),{headers:this.headers}).then(this._handleResponse).catch(this._catchError)}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this.url,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:n})}).then(this._handleResponse)}},{key:"setUserAvatar",value:function(e){return fetch("".concat(this.url,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"likeCard",value:function(e,t){return fetch("".concat(this.url,"/cards/likes/").concat(e)),{method:t?"DELETE":"PUT",headers:this.headers}.then(this._handleResponse)}},{key:"_catchError",value:function(){console.log("Что-то сломалось")}}])&&W(t.prototype,n),e}();function Q(e){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function K(e,t,n){return(K="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ee(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function X(e,t){return(X=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Y(e,t){return!t||"object"!==Q(t)&&"function"!=typeof t?$(e):t}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e){return(ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&X(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ee(r);if(o){var n=ee(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Y(this,e)});function a(e,t){var n,r,o,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(e){n._handleFormSubmit=e},(o="setFormSubmit")in(r=$(n=i.call(this,e)))?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,n._handleFormSubmit=t,n._buttonSubmit=n._popup.querySelector(".form__button"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e)})),K(ee(a.prototype),"setEventListeners",this).call(this)}},{key:"setButtonText",value:function(e){this._buttonSubmit.textContent=e?"Удаление...":"Да"}}])&&Z(t.prototype,n),a}(P),ne=new z({url:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{authorization:"4187936b-f13d-40c6-aac3-45e4140019db","Content-Type":"application/json"}});ne.getInitialCards().then((function(e){new L({items:e.reverse(),renderer:ae},y,ne).renderItems()}));var re=new J(_,(function(e){ne.addTask({name:e.title,link:e.link}).then((function(e){re.setButtonText(!0),ae(e)})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){re.setButtonText(!1),re.close(_)}))})),oe=new L({items:t.initialCards,renderer:ae},y,ne),ie=new U(m);function ae(e){var t=new O(e,v,(function(){ie.open(e.name,e.link)}),se,ue,ne).createCard();oe.addItem(t)}function ue(e){e.isLiked(e)&&ne.likeCard(e.id()).then((function(t){e.setLikeCard(t)})).catch((function(e){console.log(e)}))}var ce=new te(a,se);function se(e){ce.open(),ce.setFormSubmit((function(){ne.deleteTask(e._cardId).then((function(){ce.setButtonText(!0),e.removeCard()})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){ce.setButtonText(!1),ce.close(a)}))}))}ce.setEventListeners();var le=new H(c,s,g),fe=new J(f,(function(e){var t=e.name,n=e.about;ne.setUserInfo({name:t,about:n}).then((function(e){var t=e.name,n=e.about;fe.setButtonText(!0),le.setUserInfo({name:t,about:n}),le.updataUserInfo()})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){fe.setButtonText(!1),fe.close(f)}))}));ne.getUserInfo().then((function(e){var t=e.name,n=e.about,r=e.avatar;le.setUserInfo({name:t,about:n}),le.updataUserInfo(),le.setUserInfo({avatar:r}),le.updataUserAvatar()}));var pe=new J(u,(function(e){le.setUserInfo(e),ne.setUserAvatar(e).then((function(e){pe.setButtonText(!0),le.setUserInfo(e),le.updataUserAvatar()})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){pe.setButtonText(!1),pe.close(u)}))}));new S(n,r).enableValidation(),new S(n,o).enableValidation();var he=new S(n,i);he.enableValidation(),l.addEventListener("click",(function(){var e=le.getUserInfo();p.value=e.name,h.value=e.about,fe.open(),console.log(e.nameInput)})),d.addEventListener("click",(function(){he.setSubmitButtonState(),re.open(_)})),document.querySelector(".profile__redact-img").addEventListener("click",(function(){var e=le.getUserAvatar();b.value=e.avatar,pe.open(u)})),re.setEventListeners(_),ie.setEventListeners(m),fe.setEventListeners(f),pe.setEventListeners(u),ce.setEventListeners(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS8uL3NyYy9zY3JpcHRzL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhTdWJtaXQuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS8uL3NyYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImNvbmZpZ1ZhbGlkYXRpb24iLCJmb3JtU2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImVkaXRBdmF0YXJGb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWRpdFByb2ZpbGVGb3JtIiwiZWRpdE5ld0NhcmRGb3JtIiwicG9wdXBEZWxldGVDYXJkIiwicG9wdXBBdmF0YXIiLCJwcm9maWxlVGl0bGUiLCJwcm9maWxlU3VidGl0bGUiLCJlZGl0QnRuIiwicHJvZmlsZVBvcHVwIiwibmFtZUlucHV0Iiwiam9iSW5wdXQiLCJidXR0b25PcGVuUG9wdXBDYXJkIiwibmV3Q2FyZFBvcHVwIiwic2VjdGlvbkVsZW1lbnRzIiwicG9wdXBJbWdPcGVuIiwiY2FyZFNlbGVjdG9yIiwiYXZhdGFySW5wdXQiLCJwcm9maWxlQXZhdGFyIiwiRm9ybVZhbGlkYXRvciIsInRoaXMiLCJfY29uZmlnVmFsaWRhdGlvbiIsIl9mb3JtU2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJfaGFuZGxlRm9ybUlucHV0IiwiX2lucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZXRTdWJtaXRCdXR0b25TdGF0ZSIsImZvckVhY2giLCJfaW5wdXQiLCJfc2V0Q2FzdG9tRXJyb3IiLCJpbnB1dCIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUVycm9yIiwiX3Nob3dFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiaWQiLCJ0ZXh0Q29udGVudCIsIl9zZXRGaWVsZEVycm9yIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiX2J1dHRvbiIsImlzVmFsaWQiLCJjaGVja1ZhbGlkaXR5IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiQ2FyZCIsImRhdGEiLCJvcGVuIiwiaGVuZGxlQ2FyZERlbGV0IiwiaGVuZGxlQ2FyZExpa2UiLCJhcGkiLCJfZWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsIl9yZW1vdmVCdXR0b25EZWxldGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJzZXRMaWtlQ2FyZCIsInNyYyIsIl9saW5rIiwiYWx0IiwiX25hbWUiLCJfcG9wdXBEZWxldGVDYXJkIiwiX2VsZW1lbnRHcm91cCIsInRvZ2dsZSIsIm5hbWUiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9vcGVuIiwiX2hlbmRsZUNhcmREZWxldCIsIl9jYXJkSWQiLCJfaWQiLCJfb3duZXIiLCJvd25lciIsIl91c2VySWQiLCJfbGlrZXMiLCJsaWtlcyIsIl9teUlkIiwibXlJZCIsIl9oZW5kbGVDYXJkTGlrZSIsIl9hcGkiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZGVsZXRlQ2FyZCIsIl9lbGVtZW50TGlrZSIsInN0eWxlIiwiZGlzcGxheSIsIl9pc0xpa2VkIiwiZmlsdGVyIiwibGVuZ3RoIiwiU2VjdGlvbiIsIml0ZW1zIiwicmVuZGVyZXIiLCJhZGRUYXNrIiwidGhlbiIsInJlcyIsImFkZEl0ZW0iLCJjYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfc2VjdGlvbkVsZW1lbnRzIiwiaXRlbSIsImNhcmRFbGVtZW50IiwicHJlcGVuZCIsIlBvcHVwIiwicG9wdXAiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsIlBvcHVwV2l0aEltYWdlIiwiX3BvcHVwQ2FyZEltYWdlIiwiX2NhcHRpb25JbWFnZSIsIlBvcHVwV2l0aEZvcm0iLCJzYXZlTmV3Q2FyZCIsIl9zYXZlTmV3Q2FyZCIsIl9idXR0b25TdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsIl9mb3JtVmFsdWVzIiwib3ZlciIsIlVzZXJJbmZvIiwiX3Byb2ZpbGVOYW1lIiwiX3Byb2ZpbGVKb2IiLCJfcHJvZmlsZUF2YXRhciIsImFib3V0IiwiYXZhdGFyIiwiQXBpIiwidXJsIiwiaGVhZGVycyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJmZXRjaCIsIm1ldGhvZCIsIl9oYW5kbGVSZXNwb25zZSIsIl9jYXRjaEVycm9yIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYXJkSWQiLCJsaWtlIiwiUG9wdXBXaXRoU3VibWl0IiwiaGFuZGxlRm9ybVN1Ym1pdCIsImNhbGxiYWNrIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJhdXRob3JpemF0aW9uIiwiZ2V0SW5pdGlhbENhcmRzIiwicmV2ZXJzZSIsImFkZENhcmQiLCJyZW5kZXJJdGVtcyIsImFkZENhcmRQb3B1cCIsImlucHV0VmFsdWVzIiwidGl0bGUiLCJzZXRCdXR0b25UZXh0IiwiZmluYWxseSIsInNlY3Rpb25DbGFzcyIsImluaXRpYWxDYXJkcyIsInBvcHVwV2l0aEltYWdlQ2xhc3MiLCJjcmVhdGVDYXJkIiwiY2FyZCIsImlzTGlrZWQiLCJsaWtlQ2FyZCIsImVyciIsInBvcHVwV2l0aFN1Ym1pdENsYXNzIiwic2V0Rm9ybVN1Ym1pdCIsImRlbGV0ZVRhc2siLCJyZW1vdmVDYXJkIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJ1c2VySW5mb0NsYXNzIiwiZWRpdFByb2ZpbGVQb3B1cCIsInNldFVzZXJJbmZvIiwidXBkYXRhVXNlckluZm8iLCJnZXRVc2VySW5mbyIsInVwZGF0YVVzZXJBdmF0YXIiLCJlZGl0QXZhdGFyUG9wdXAiLCJzZXRVc2VyQXZhdGFyIiwiZW5hYmxlVmFsaWRhdGlvbiIsImFkZENhcmRGb3JtVmFsaWRhdG9yIiwiY3VycmVudFVzZXJJbmZvIiwiY3VycmVudFVzZXJBdmF0YXIiLCJnZXRVc2VyQXZhdGFyIl0sIm1hcHBpbmdzIjoibUJBQ0EsSUFBSUEsRUFBc0IsQ0NBMUIsRUFBd0IsQ0FBQ0MsRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYRixFQUFvQkksRUFBRUYsRUFBWUMsS0FBU0gsRUFBb0JJLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsTUNKM0UsRUFBd0IsQ0FBQ00sRUFBS0MsSUFBVUwsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NDbEYsRUFBeUJULElBQ0gsb0JBQVhhLFFBQTBCQSxPQUFPQyxhQUMxQ1YsT0FBT0MsZUFBZUwsRUFBU2EsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEWCxPQUFPQyxlQUFlTCxFQUFTLGFBQWMsQ0FBRWUsT0FBTyxNLCtMQ0xoRCxJQUFNQyxFQUFtQixDQUM1QkMsYUFBYyxRQUNkQyxjQUFlLGVBQ2ZDLHFCQUFzQixnQkFDdEJDLG9CQUFxQix1QkFDckJDLGdCQUFpQiwyQkFDakJDLFdBQVksZUFHSEMsRUFBaUJDLFNBQVNDLGNBQWMsb0NBQ3hDQyxFQUFrQkYsU0FBU0MsY0FBYyxxQ0FDekNFLEVBQWtCSCxTQUFTQyxjQUFjLCtCQUN6Q0csRUFBa0JKLFNBQVNDLGNBQWMsaUJBQ3pDSSxFQUFjTCxTQUFTQyxjQUFjLGlCQUNyQ0ssRUFBZU4sU0FBU0MsY0FBYyxtQkFDdENNLEVBQWtCUCxTQUFTQyxjQUFjLHNCQUV6Q08sRUFBVVIsU0FBU0MsY0FBYyx5QkFDakNRLEVBQWVULFNBQVNDLGNBQWMsa0JBQ3RDUyxFQUFZVixTQUFT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QWtCcUwsRUFBZ0J6SCxLQUNsQzNELFFBQWlCb0wsRUFBZ0J4RCxNQUNqQytDLEdBQWlCaEksT0FDakJpRCxRQUFRQyxJQUFJdUYsRUFBZ0JyTCxjQUdoQ0UsRUFBb0JXLGlCQUFpQixTQUFTLFdBQzFDdUssR0FBcUIvSix1QkFDcEJvSSxHQUFhN0csS0FBS3pDLE1BRXZCYixTQUFTQyxjQUFjLHdCQUF3QnNCLGlCQUFpQixTQUFTLFdBQ3JFLElBQU15SyxFQUFvQlgsR0FBY1ksZ0JBQ3hDaEwsUUFBb0IrSyxFQUFrQnhELE9BQ3RDbUQsR0FBZ0JySSxLQUFLakQsTUFFekI4SixHQUFhaUIsa0JBQWtCdkssR0FDL0I2SixHQUFvQlUsa0JBQWtCckssR0FDdEN1SyxHQUFpQkYsa0JBQWtCM0ssR0FDbkNrTCxHQUFnQlAsa0JBQWtCL0ssR0FDbEMySyxHQUFxQkksa0JBQWtCaEwsSSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgY29uc3QgY29uZmlnVmFsaWRhdGlvbiA9IHtcclxuICAgIGZvcm1TZWxlY3RvcjogJy5mb3JtJyxcclxuICAgIGlucHV0U2VsZWN0b3I6ICcuZm9ybV9faW5wdXQnLFxyXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcuZm9ybV9fYnV0dG9uJyxcclxuICAgIGluYWN0aXZlQnV0dG9uQ2xhc3M6ICdmb3JtX19idXR0b25faW52YWxpZCcsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6ICdmb3JtX19pbnB1dC1ib3JkZXItZXJyb3InLFxyXG4gICAgZXJyb3JDbGFzczogJ2Zvcm1fX2lucHV0J1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZWRpdEF2YXRhckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybVtuYW1lID0gXCJmb3JtUmVkYWN0QXZhdGFyXCJdJyk7IC8vOVxyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1bbmFtZSA9IFwiZm9ybVJlZGFjdFByb2ZpbGVcIl0nKTtcclxuZXhwb3J0IGNvbnN0IGVkaXROZXdDYXJkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtW25hbWUgPSBcImZvcm1OZXdDYXJkXCJdJyk7XHJcbmV4cG9ydCBjb25zdCBwb3B1cERlbGV0ZUNhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfZGVsZXRlJyk7IC8vOVxyXG5leHBvcnQgY29uc3QgcG9wdXBBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfYXZhdGFyJyk7ICAvLzlcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX190aXRsZScpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVN1YnRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX3N1YnRpdGxlJyk7XHJcbi8vIGV4cG9ydCBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb25maWdWYWxpZGF0aW9uLmZvcm1TZWxlY3RvcikpO1xyXG5leHBvcnQgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19lZGl0LWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3Byb2ZpbGUnKTtcclxuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19pbnB1dF90eXBlX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IGpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2lucHV0X3R5cGVfcm9sZScpO1xyXG5leHBvcnQgY29uc3QgYnV0dG9uT3BlblBvcHVwQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX192ZWN0b3ItYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBuZXdDYXJkUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfaW1hZ2VzJyk7XHJcbmV4cG9ydCBjb25zdCBzZWN0aW9uRWxlbWVudHMgPSAnLmVsZW1lbnRzJztcclxuZXhwb3J0IGNvbnN0IHBvcHVwSW1nT3BlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9pbWcnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRTZWxlY3RvciA9ICcjdG1wbHQnO1xyXG5leHBvcnQgY29uc3QgYXZhdGFySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9faW5wdXRfdHlwZV9hdmF0YXInKTsgLy85XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2phY2snKTtcclxuLy8gZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/QktC+0LfQvNC+0LbQvdC+INC90LUg0L3Rg9C20LXQvVxyXG4vLyAgICAge1xyXG4vLyAgICAgICAgIG5hbWU6ICdOaXNzYW4gU2lsdmlhIHMxMycsXHJcbi8vICAgICAgICAgbGluazogJ2h0dHBzOi8vaW0wLXR1Yi1ydS55YW5kZXgubmV0L2k/aWQ9MzNiZTNmY2U5OGE0YTZjMmIyNzNmMTFmYjgyNWI1NDItbCZuPTEzJyxcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogJ1RveW90YSBTdXByYScsXHJcbi8vICAgICAgICAgbGluazogJ2h0dHBzOi8vYXZhdGFycy5tZHMueWFuZGV4Lm5ldC9nZXQtemVuX2RvYy8zMzEwODYwL3B1Yl82MDI2M2Y0NmIxYTBiYjUyYjQ1ZGNmZDhfNjAyNjQwOWFmYTBiZDkxNTlhYTlkOWNlL3NjYWxlXzEyMDAnLFxyXG4vLyAgICAgfSxcclxuLy8gICAgIHtcclxuLy8gICAgICAgICBuYW1lOiAnTmlzc2FuIEdUUicsXHJcbi8vICAgICAgICAgbGluazogJ2h0dHBzOi8vaS5waW5pbWcuY29tL29yaWdpbmFscy83NC8xYy9hNS83NDFjYTUxY2E5NTVmZDlhYTY4ZTQ1YjZhMDllYzdlMC5qcGcnLFxyXG4vLyAgICAgfSxcclxuLy8gICAgIHtcclxuLy8gICAgICAgICBuYW1lOiAnTWF6ZGEgUlgtNycsXHJcbi8vICAgICAgICAgbGluazogJ2h0dHBzOi8vc3VuOS03NC51c2VyYXBpLmNvbS9pbXBmL2M4NTc0MzIvdjg1NzQzMjc3Ni85Y2ZiMS9PVWVsS0tPMnp4OC5qcGc/c2l6ZT0xMjgweDEyODAmcXVhbGl0eT05NiZzaWduPWU1NmY4YTdmYmNkYzYyNDQzYzk0ODQyMGI3YjkyNGYwJmNfdW5pcV90YWc9S1h2QkxKakpzMXlRZE1hTjVsZ1laWS15ME9qVjAxb0dHS1RBYWZ0WGxfRSZ0eXBlPWFsYnVtJyxcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbmFtZTogJ1RveW90YSBNYXJrIElJJyxcclxuLy8gICAgICAgICBsaW5rOiAnaHR0cHM6Ly9zdW45LTcudXNlcmFwaS5jb20vaW1wZi9jODU1MTM2L3Y4NTUxMzYzMjkvMWI2OTdhL3k5NkpjQlhoNDNNLmpwZz9zaXplPTYwNHg2MDQmcXVhbGl0eT05NiZzaWduPTNjMDUxZDk5YTdkN2RiMzVjNWFiMzkwMDM0YjcxYTMzJnR5cGU9YWxidW0nLFxyXG4vLyAgICAgfSxcclxuLy8gICAgIHtcclxuLy8gICAgICAgICBuYW1lOiAnTWl0c3ViaXNoaSBFVk8gOScsXHJcbi8vICAgICAgICAgbGluazogJ2h0dHBzOi8vaS5waW5pbWcuY29tL29yaWdpbmFscy8xNC80Mi81OC8xNDQyNTg3NWFmNzU5ZjQ5ZTMxOTMwN2E3MzJkY2ZkNC5qcGcnLFxyXG4vLyAgICAgfSxcclxuLy8gXTsiLCJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY29uZmlnVmFsaWRhdGlvbiwgZm9ybVNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9jb25maWdWYWxpZGF0aW9uID0gY29uZmlnVmFsaWRhdGlvbjtcclxuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGZvcm1TZWxlY3RvcjtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtU2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtSW5wdXQoKTtcclxuICB9XHJcblxyXG5cclxuICBfaGFuZGxlRm9ybUlucHV0KCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtU2VsZWN0b3IucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9jb25maWdWYWxpZGF0aW9uLmlucHV0U2VsZWN0b3IpKTtcclxuICAgIHRoaXMuc2V0U3VibWl0QnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChfaW5wdXQpID0+IHtcclxuICAgICAgX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fc2V0Q2FzdG9tRXJyb3IoX2lucHV0KTtcclxuICAgICAgICB0aGlzLnNldFN1Ym1pdEJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2V0Q2FzdG9tRXJyb3IoaW5wdXQpIHtcclxuICAgIGlmICghaW5wdXQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0Vycm9yKGlucHV0LCBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlRXJyb3IoaW5wdXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEZpZWxkRXJyb3IoaW5wdXQpIHtcclxuICAgIGNvbnN0IHNwYW4gPSB0aGlzLl9mb3JtU2VsZWN0b3IucXVlcnlTZWxlY3RvcihgIyR7aW5wdXQuaWR9LWVycm9yYCk7XHJcbiAgICBzcGFuLnRleHRDb250ZW50ID0gaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgfVxyXG5cclxuICBfc2hvd0Vycm9yKGlucHV0KSB7XHJcbiAgICB0aGlzLl9zZXRGaWVsZEVycm9yKGlucHV0KTtcclxuICAgIGlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5fY29uZmlnVmFsaWRhdGlvbi5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVFcnJvcihpbnB1dCkge1xyXG4gICAgdGhpcy5fc2V0RmllbGRFcnJvcihpbnB1dCk7XHJcbiAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZ1ZhbGlkYXRpb24uaW5wdXRFcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIHNldFN1Ym1pdEJ1dHRvblN0YXRlKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uID0gdGhpcy5fZm9ybVNlbGVjdG9yLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnVmFsaWRhdGlvbi5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5fZm9ybVNlbGVjdG9yLmNoZWNrVmFsaWRpdHkoKTtcclxuICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZ1ZhbGlkYXRpb24uaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX2J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgdGhpcy5fYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fY29uZmlnVmFsaWRhdGlvbi5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgIH1cclxuICB9O1xyXG59IiwiZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBvcGVuLCBwb3B1cERlbGV0ZUNhcmQsIGhlbmRsZUNhcmREZWxldCwgaGVuZGxlQ2FyZExpa2UsIGFwaSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5fb3BlbiA9IG9wZW47XHJcbiAgICAgICAgdGhpcy5fcG9wdXBEZWxldGVDYXJkID0gcG9wdXBEZWxldGVDYXJkO1xyXG4gICAgICAgIHRoaXMuX2hlbmRsZUNhcmREZWxldCA9IGhlbmRsZUNhcmREZWxldDtcclxuICAgICAgICB0aGlzLl9jYXJkSWQgPSBkYXRhLl9pZDtcclxuICAgICAgICB0aGlzLl9vd25lciA9IGRhdGEub3duZXIuX2lkO1xyXG4gICAgICAgIHRoaXMuX3VzZXJJZCA9ICdiODAxZmJhN2JkN2VmMGZhMDU5MWYwNTQnXHJcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzO1xyXG4gICAgICAgIHRoaXMuX215SWQgPSBkYXRhLm15SWQ7XHJcbiAgICAgICAgdGhpcy5faGVuZGxlQ2FyZExpa2UgPSBoZW5kbGVDYXJkTGlrZTtcclxuICAgICAgICB0aGlzLl9hcGkgPSBhcGk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5faGVuZGxlQ2FyZExpa2UpXHJcbiAgICB9XHJcblxyXG4gICAgLy/QlNC+0LHQsNCy0LvQtdC90LjQtSDQutCw0YDRgtC+0YfQtdC6INC40Lcg0LzQsNGB0YHQuNCy0LBcclxuICAgIGNyZWF0ZUNhcmQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlQnV0dG9uRGVsZXRlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5zZXRMaWtlQ2FyZCh0aGlzKVxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2ltZycpLnNyYyA9IHRoaXMuX2xpbms7ICAgICAgICAgICAgICAgICAgLy/Qv9C10YDQtdC00LDRjiDQtNCw0L3QvdGL0LVcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWcnKS5hbHQgPSB0aGlzLl9uYW1lOyAgICAgICAgICAgICAgICAgIC8v0L/QtdGA0LXQtNCw0Y4g0LTQsNC90L3Ri9C1XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fdGl0bGUnKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7ICAgICAgICAvL9C/0LXRgNC10LTQsNGOINC00LDQvdC90YvQtVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/QstC+0LfQstGA0LDRidCw0Y4g0Y3Qu9C10LzQtdC90YJcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgICAgICAgLmNvbnRlbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50JylcclxuICAgICAgICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudEdyb3VwID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fZ3JvdXAnKVxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRHcm91cC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2V0TGlrZUNhcmQpOyAvL9C+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPINC70LDQudC60LBcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgXHJcbiAgICAgICAgICAgIHRoaXMuX29wZW4oKSB9KTsgLy/QvtCx0YDQsNCx0L7RgtGH0LjQuiDRgdC+0LHRi9GC0LjRjyDQvtGC0LrRgNGL0YLQuNGPINCyINCx0L7Qu9GM0YjQvtC8INGA0LDQt9C80LXRgNC1XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fZGVsZXRlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRlbGV0ZUNhcmQpOyAvL9C+0YLQutGA0YvRgtC40Y8g0L/QvtC/0LDQv9CwINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudExpa2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19saWtlX251bWJlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0YTRg9C90LrRhtC40Y8g0YPQtNCw0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbiAgICBkZWxldGVDYXJkID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cERlbGV0ZUNhcmQodGhpcylcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDYXJkID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICAvL9Ch0LrRgNGL0LLQsNC10YIg0YPRgNC90YMg0YEg0YfRg9C20L7QuSDQutCw0YDRgtC+0YfQutC4XHJcbiAgICBfcmVtb3ZlQnV0dG9uRGVsZXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9vd25lciAhPT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2RlbGV0ZScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAgICAgLy/RhNGD0L3QutGG0LjRjyDQu9Cw0LnQutCwXHJcbiAgICBfbGlrZUNhcmQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudEdyb3VwLmNsYXNzTGlzdC50b2dnbGUoJ2VsZW1lbnRfX2dyb3VwX2FjdGl2ZScpO1xyXG4gICAgfVxyXG4gICAgICBzZXRMaWtlQ2FyZCgpIHtcclxuICAgICAgICAvLyAgIGRlYnVnZ2VyXHJcbiAgICAgICAgdGhpcy5faXNMaWtlZCA9IHRoaXMuX2xpa2VzLmZpbHRlcigoKSA9PiB7IHJldHVybiB0aGlzLl91c2VySWQgPT09IHRoaXMuX293bmVyIH0pLmxlbmd0aCA+IDBcclxuICAgICAgICB0aGlzLl9lbGVtZW50TGlrZS50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICAgICAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICAgICAgdGhpcy5fZWxlbWVudEdyb3VwLmNsYXNzTGlzdC5hZGQoJ2VsZW1lbnRfX2dyb3VwX2FjdGl2ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLl9lbGVtZW50R3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnZWxlbWVudF9fZ3JvdXBfYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBpc0xpa2VkKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5faXNMaWtlZFxyXG4gICAgfVxyXG4gICAgICBcclxuICAgIGNhcmRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FyZElkXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBzZWN0aW9uRWxlbWVudHMsIGFwaSkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgICAgICB0aGlzLl9zZWN0aW9uRWxlbWVudHMgPSBzZWN0aW9uRWxlbWVudHM7XHJcbiAgICAgICAgdGhpcy5fYXBpID0gYXBpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLl9yZW5kZXJlcihpdGVtKSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGNhcmRFbGVtZW50KSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWN0aW9uRWxlbWVudHMpLnByZXBlbmQoY2FyZEVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVJdGVtID0gKGRhdGEpID0+IHtcclxuICAgICAgICB0aGlzLl9hcGlcclxuICAgICAgICAuYWRkVGFzayhkYXRhKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZGRJdGVtKHJlcylcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7Y29uc29sZS5sb2coJ9Ca0LDRgNGC0L7Rh9C60LAg0L3QtSDQtNC+0LHQsNCy0LjQu9Cw0YHRjCcpfSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXApIHtcclxuICAgICAgICB0aGlzLl9wb3B1cCA9IHBvcHVwO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgIH1cclxuICAgIC8v0KTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LBcclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIH1cclxuICAgIC8v0KTRg9C90LrRhtC40Y8g0LfQsNC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LBcclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcbiAgICAvL9C30LDQutGA0YvRgtC40LUg0LrQu9C40LrQvtC8INC90LAg0L7QstC10YDQu9C10LlcclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpXHJcbiAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgLy/Ql9Cw0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDQvdCwINC60YDQtdGB0YLQuNC6XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIC8v0JfQsNC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0L7QsiDRh9C10YDQtdC3IEVTQ1xyXG4gICAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xyXG4gICAgICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXApIHtcclxuICAgICAgICBzdXBlcihwb3B1cCk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBDYXJkSW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltZycpO1xyXG4gICAgICAgIHRoaXMuX2NhcHRpb25JbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fdGl0bGUnKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKG5hbWUsIGxpbmspIHtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBDYXJkSW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9jYXB0aW9uSW1hZ2UudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwQ2FyZEltYWdlLnNyYyA9IGxpbms7XHJcbiAgICAgIH1cclxufSIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cCwgc2F2ZU5ld0NhcmQpIHtcclxuICAgICAgICBzdXBlcihwb3B1cCk7XHJcbiAgICAgICAgdGhpcy5fc2F2ZU5ld0NhcmQgPSBzYXZlTmV3Q2FyZDtcclxuICAgICAgICB0aGlzLl9idXR0b25TdWJtaXQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fYnV0dG9uJyk7XHJcbiAgICAgICAgLy8gdGhpcy5fYnV0dG9uU3VibWl0VGV4dCA9IHRoaXMuX2J1dHRvblN1Ym1pdC50ZXh0Q29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycyh0aGlzLl9wb3B1cCk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2F2ZU5ld0NhcmQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UodGhpcy5fcG9wdXApO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtJykucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnLmZvcm1fX2lucHV0Jyk7XHJcbiAgICAgICAgdGhpcy5fZm9ybVZhbHVlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKGlucHV0ID0+IHRoaXMuX2Zvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1WYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QnV0dG9uVGV4dChvdmVyKSB7XHJcbiAgICAgICAgaWYgKG92ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uU3VibWl0LnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvblN1Ym1pdC50ZXh0Q29udGVudCA9ICfQodC+0YXRgNCw0L3QuNGC0YwnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFVzZXJJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb2ZpbGVUaXRsZSwgcHJvZmlsZVN1YnRpdGxlLCBwcm9maWxlQXZhdGFyKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBwcm9maWxlVGl0bGU7ICAgLy9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fdGl0bGUnKTtcclxuICAgICAgICB0aGlzLl9wcm9maWxlSm9iID0gcHJvZmlsZVN1YnRpdGxlOyAgLy9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fc3VidGl0bGUnKTtcclxuICAgICAgICB0aGlzLl9wcm9maWxlQXZhdGFyID0gIHByb2ZpbGVBdmF0YXI7ICAgLy9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9famFjaycpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuYWJvdXQgPSAnJztcclxuICAgICAgICB0aGlzLmF2YXRhciA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgYWJvdXQ6IHRoaXMuYWJvdXQsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0VXNlckF2YXRhcigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhdmF0YXI6IHRoaXMuYXZhdGFyXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFVzZXJJbmZvKHtuYW1lLCBhYm91dCwgYXZhdGFyfSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWUsXHJcbiAgICAgICAgdGhpcy5hYm91dCA9IGFib3V0O1xyXG4gICAgICAgIHRoaXMuYXZhdGFyID0gYXZhdGFyXHJcbiAgICB9XHJcblxyXG4gICAgLy/QntCx0L3QvtCy0LvRj9C10Lwg0LTQsNC90L3Ri9C1INC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgdXBkYXRhVXNlckluZm8oKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudCA9IHRoaXMuYWJvdXQ7XHJcbiAgICB9XHJcbiAgICB1cGRhdGFVc2VyQXZhdGFyKCkge1xyXG4gICAgICAgIHRoaXMuX3Byb2ZpbGVBdmF0YXIuc3JjID0gdGhpcy5hdmF0YXJcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3IoeyB1cmwsIGhlYWRlcnMgfSkge1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICB9XHJcbiAgICAvL9CU0L7QsdCw0LLQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C10Log0YEg0YHQtdGA0LLQtdGA0LBcclxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L2NhcmRzYCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSlcclxuICAgICAgICAuY2F0Y2godGhpcy5fY2F0Y2hFcnJvcik7XHJcbiAgICB9XHJcbiAgICAvL9C00L7QsdCw0LLQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcclxuICAgIGFkZFRhc2soZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpXHJcbiAgICAgICAgICAgIC8vIC5jYXRjaCh0aGlzLl9jYXRjaEVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVUYXNrKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSlcclxuICAgICAgICAvLyAuY2F0Y2godGhpcy5fY2F0Y2hFcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy/QoNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC/0YDQvtGE0LjQu9GPKNC/0L7Qu9GD0YfQsNGOINC00LDQvdC90YvQtSDRgSDRgdC10YDQstC10YDQsClcclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgICAgIC8vIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpXHJcbiAgICAgICAgLmNhdGNoKHRoaXMuX2NhdGNoRXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQv9GA0L7RhNC40LvRjyjQntGC0L/RgNCw0LLQu9GP0Y4g0LTQsNC90L3Ri9C1INC00LAg0YHQtdGA0LLQtdGAKVxyXG4gICAgc2V0VXNlckluZm8oe25hbWUsIGFib3V0fSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKVxyXG4gICAgICAgIC8vIC5jYXRjaCh0aGlzLl9jYXRjaEVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvL9C30LDQvNC10L3QsCDQsNCy0LDRgtCw0YDQsFxyXG4gICAgc2V0VXNlckF2YXRhcihhdmF0YXIpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGF2YXRhcilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKVxyXG4gICAgICAgIC8vIC5jYXRjaCh0aGlzLl9jYXRjaEVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvL9C70LDQudC60LhcclxuICAgIGxpa2VDYXJkKGlkLCBsaWtlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS9jYXJkcy9saWtlcy8ke2lkfWApLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogbGlrZSA/ICdERUxFVEUnIDogJ1BVVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgICB9XHJcbiAgICAgICAgLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIF9oYW5kbGVSZXNwb25zZSA9IChyZXMpID0+IHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDQtdGB0LvQuCDQvtGI0LjQsdC60LAsINC+0YLQutC70L7QvdGP0LXQvCDQv9GA0L7QvNC40YFcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfVxyXG5cclxuICAgIF9jYXRjaEVycm9yKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfQp9GC0L4t0YLQviDRgdC70L7QvNCw0LvQvtGB0YwnKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXBcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhTdWJtaXQgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cCwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgICAgICB0aGlzLl9idXR0b25TdWJtaXQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fYnV0dG9uJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcyk7IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRGb3JtU3VibWl0ID0gKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gY2FsbGJhY2s7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2V0QnV0dG9uVGV4dChvdmVyKSB7XHJcbiAgICAgICAgICBpZiAob3Zlcikge1xyXG4gICAgICAgICAgICAgIHRoaXMuX2J1dHRvblN1Ym1pdC50ZXh0Q29udGVudCA9ICfQo9C00LDQu9C10L3QuNC1Li4uJ1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLl9idXR0b25TdWJtaXQudGV4dENvbnRlbnQgPSAn0JTQsCdcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSAgICAgICIsImltcG9ydCAnLi4vcGFnZXMvaW5kZXguY3NzJ1xyXG5pbXBvcnQge1xyXG4gICAgZWRpdEF2YXRhckZvcm0sIGVkaXRQcm9maWxlRm9ybSwgZWRpdE5ld0NhcmRGb3JtLCBcclxuICAgIHBvcHVwQXZhdGFyLCBwcm9maWxlVGl0bGUsIHByb2ZpbGVTdWJ0aXRsZSxcclxuICAgIGNvbmZpZ1ZhbGlkYXRpb24sIGF2YXRhcklucHV0LFxyXG4gICAgZWRpdEJ0biwgcHJvZmlsZVBvcHVwLCBwb3B1cERlbGV0ZUNhcmQsXHJcbiAgICBuYW1lSW5wdXQsIGpvYklucHV0LFxyXG4gICAgYnV0dG9uT3BlblBvcHVwQ2FyZCwgbmV3Q2FyZFBvcHVwLFxyXG4gICAgc2VjdGlvbkVsZW1lbnRzLCBwb3B1cEltZ09wZW4sXHJcbiAgICBjYXJkU2VsZWN0b3IsIGluaXRpYWxDYXJkcyxcclxuICAgIHByb2ZpbGVBdmF0YXIsXHJcbn0gZnJvbSAnLi91dGlscy9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhJbWFnZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IHsgUG9wdXBXaXRoRm9ybSB9IGZyb20gXCIuL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgeyBVc2VySW5mbyB9IGZyb20gXCIuL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi9jb21wb25lbnRzL0FwaSc7ICAgIC8vOVxyXG5pbXBvcnQgeyBQb3B1cFdpdGhTdWJtaXQgfSBmcm9tICcuL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0JztcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoeyAgICAgICAgICAgICAgICAgICAvLzlcclxuICAgIHVybDogJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtMjYnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICBhdXRob3JpemF0aW9uOiAnNDE4NzkzNmItZjEzZC00MGM2LWFhYzMtNDVlNDE0MDAxOWRiJyxcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL9Cg0LDQsdC+0YLQsCDRgSDQutCw0YDRgtC+0YfQutCw0LzQuFxyXG4gIC8v0JTQvtCx0LDQstC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LXQuiDRgSDRgdC10YDQstC10YDQsFxyXG4gIGFwaS5nZXRJbml0aWFsQ2FyZHMoKVxyXG4gIC50aGVuKChyZXMpID0+IHtcclxuICAgIGNvbnN0IHNlY3Rpb25DbGFzcyA9IG5ldyBTZWN0aW9uKHsgXHJcbiAgICAgICAgaXRlbXM6IHJlcy5yZXZlcnNlKCksIHJlbmRlcmVyOiBhZGRDYXJkIH0sIHNlY3Rpb25FbGVtZW50cywgYXBpKTtcclxuICAgIHNlY3Rpb25DbGFzcy5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcblxyXG5cclxuICAvL9CU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LrQsNGA0YLQvtGH0LrQuFxyXG5jb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShuZXdDYXJkUG9wdXAsIChpbnB1dFZhbHVlcykgPT4ge1xyXG4gICAgYXBpLmFkZFRhc2soe25hbWU6IGlucHV0VmFsdWVzLnRpdGxlLCBsaW5rOiBpbnB1dFZhbHVlcy5saW5rfSkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIGFkZENhcmRQb3B1cC5zZXRCdXR0b25UZXh0KHRydWUpXHJcbiAgICAgICAgYWRkQ2FyZChkYXRhKVxyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ9Cn0YLQvi3RgtC+INGB0LvQvtC80LDQu9C+0YHRjCEnKVxyXG4gICAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIGFkZENhcmRQb3B1cC5zZXRCdXR0b25UZXh0KGZhbHNlKVxyXG4gICAgICAgIGFkZENhcmRQb3B1cC5jbG9zZShuZXdDYXJkUG9wdXApOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy/Qt9Cw0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L9cclxuICAgICAgfSlcclxufSk7XHJcbmNvbnN0IHNlY3Rpb25DbGFzcyA9IG5ldyBTZWN0aW9uKHsgaXRlbXM6IGluaXRpYWxDYXJkcywgcmVuZGVyZXI6IGFkZENhcmQgfSwgc2VjdGlvbkVsZW1lbnRzLCBhcGkpO1xyXG5jb25zdCBwb3B1cFdpdGhJbWFnZUNsYXNzID0gbmV3IFBvcHVwV2l0aEltYWdlKHBvcHVwSW1nT3Blbik7XHJcblxyXG5mdW5jdGlvbiBhZGRDYXJkKGRhdGEpIHtcclxuICAgIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChkYXRhLCBjYXJkU2VsZWN0b3IsICgpID0+IHtcclxuICAgICAgICBwb3B1cFdpdGhJbWFnZUNsYXNzLm9wZW4oZGF0YS5uYW1lLCBkYXRhLmxpbmspXHJcbiAgICB9LFxyXG4gICAgLy/QntGC0LrRgNGL0LLQsNGOINC/0L7Qv9Cw0L8g0L/QvtC00YLQstC10YDQttC00LXQvdC40Y9cclxuICAgIGRlbGV0ZUNhcmQsIGhlbmRsZUNhcmRMaWtlLFxyXG4gICAgYXBpKTtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5jcmVhdGVDYXJkKCk7XHJcbiAgICBzZWN0aW9uQ2xhc3MuYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v0JLRi9Cy0L7QtCDQtNCw0L3QvdGL0YUg0L3QsCDRgdGC0YAuXHJcblxyXG5cclxuLy/Qm9Cw0LnQutC4XHJcbmZ1bmN0aW9uIGhlbmRsZUNhcmRMaWtlKGNhcmQpIHtcclxuICAgIGRlYnVnZ2VyXHJcbiAgICBpZihjYXJkLmlzTGlrZWQoY2FyZCkpIHtcclxuICAgICAgYXBpLmxpa2VDYXJkKGNhcmQuaWQoKSlcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGNhcmQuc2V0TGlrZUNhcmQocmVzKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgfSlcclxuICAgIH0gLyplbHNlIHtcclxuICAgICAgYXBpLmxpa2VDYXJkKGNhcmQuaWQoKSlcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGNhcmQuc2V0TGlrZUluZm8ocmVzKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfQp9GC0L4t0YLQviDRgdC70L7QvNCw0LvQvtGB0YwhJylcclxuICAgIH0pXHJcbiAgICB9Ki9cclxuICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL9Cj0LTQsNC70LXQvdC40LUg0LrQsNGA0YLQvtGH0LXQulxyXG5cclxuY29uc3QgcG9wdXBXaXRoU3VibWl0Q2xhc3MgPSBuZXcgUG9wdXBXaXRoU3VibWl0KHBvcHVwRGVsZXRlQ2FyZCwgZGVsZXRlQ2FyZClcclxucG9wdXBXaXRoU3VibWl0Q2xhc3Muc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmZ1bmN0aW9uIGRlbGV0ZUNhcmQoY2FyZCkge1xyXG4gICAgcG9wdXBXaXRoU3VibWl0Q2xhc3Mub3BlbigpXHJcbiAgICBwb3B1cFdpdGhTdWJtaXRDbGFzcy5zZXRGb3JtU3VibWl0KCgpID0+IHtcclxuICAgICAgICBhcGkuZGVsZXRlVGFzayhjYXJkLl9jYXJkSWQpXHJcbiAgICAgICAgICAgIC50aGVuICgoKSA9PiB7XHJcbiAgICAgICAgICAgIHBvcHVwV2l0aFN1Ym1pdENsYXNzLnNldEJ1dHRvblRleHQodHJ1ZSlcclxuICAgICAgICAgICAgY2FyZC5yZW1vdmVDYXJkKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQp9GC0L4t0YLQviDRgdC70L7QvNCw0LvQvtGB0YwhJylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBXaXRoU3VibWl0Q2xhc3Muc2V0QnV0dG9uVGV4dChmYWxzZSlcclxuICAgICAgICAgICAgICAgIHBvcHVwV2l0aFN1Ym1pdENsYXNzLmNsb3NlKHBvcHVwRGVsZXRlQ2FyZClcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxufVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/QoNCw0LHQvtGC0LAg0YEg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtdC8INC/0YDQvtGE0LjQu9GPXHJcbmNvbnN0IHVzZXJJbmZvQ2xhc3MgPSBuZXcgVXNlckluZm8ocHJvZmlsZVRpdGxlLCBwcm9maWxlU3VidGl0bGUsIHByb2ZpbGVBdmF0YXIpO1xyXG4vL9Ch0L7RhdGA0LDQvdC10L3QuNC1INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LTQsNC90L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xyXG5jb25zdCBlZGl0UHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0ocHJvZmlsZVBvcHVwLCAoe25hbWUsIGFib3V0fSkgPT4ge1xyXG4gICAgLy/QntGC0L/RgNCw0LLQu9GP0Y4g0LTQsNC90L3Ri9C1INC/0YDQvtGE0LjQu9GPINC90LAg0YHQtdGA0LLQtdGAXHJcbiAgICBhcGkuc2V0VXNlckluZm8oe25hbWUsIGFib3V0fSkudGhlbigoe25hbWUsIGFib3V0fSkgPT4ge1xyXG4gICAgICAgIGVkaXRQcm9maWxlUG9wdXAuc2V0QnV0dG9uVGV4dCh0cnVlKVxyXG4gICAgICAgIHVzZXJJbmZvQ2xhc3Muc2V0VXNlckluZm8oe25hbWU6IG5hbWUsIGFib3V0OiBhYm91dH0pXHJcbiAgICAgICAgdXNlckluZm9DbGFzcy51cGRhdGFVc2VySW5mbygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ9Cn0YLQvi3RgtC+INGB0LvQvtC80LDQu9C+0YHRjCEnKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGVkaXRQcm9maWxlUG9wdXAuc2V0QnV0dG9uVGV4dChmYWxzZSlcclxuICAgICAgICAgICAgZWRpdFByb2ZpbGVQb3B1cC5jbG9zZShwcm9maWxlUG9wdXApLy/QodC+0YXRgNCw0L3QtdC90LjRjyDQv9C+0L/QsNC/0LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9GA0L7RhNC40LvRj1xyXG4gICAgfSlcclxufSlcclxuXHJcbi8v0J/RgNC40YXQvtC+0LTRj9GCINC00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cclxuYXBpLmdldFVzZXJJbmZvKCkudGhlbigoe25hbWUsIGFib3V0LCBhdmF0YXJ9KSA9PiB7XHJcbiAgICB1c2VySW5mb0NsYXNzLnNldFVzZXJJbmZvKHtuYW1lOiBuYW1lLCBhYm91dDogYWJvdXR9KVxyXG4gICAgdXNlckluZm9DbGFzcy51cGRhdGFVc2VySW5mbygpO1xyXG4gICAgdXNlckluZm9DbGFzcy5zZXRVc2VySW5mbyh7YXZhdGFyOiBhdmF0YXJ9KVxyXG4gICAgdXNlckluZm9DbGFzcy51cGRhdGFVc2VyQXZhdGFyKCk7XHJcbiAgfSlcclxuICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v0KDQsNCx0L7RgtCwINGBINCw0LLQsNGC0LDRgNC+0LxcclxuY29uc3QgZWRpdEF2YXRhclBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBBdmF0YXIsIChhdmF0YXIpID0+IHtcclxuICAgIHVzZXJJbmZvQ2xhc3Muc2V0VXNlckluZm8oYXZhdGFyKVxyXG4gICAgYXBpLnNldFVzZXJBdmF0YXIoYXZhdGFyKS50aGVuKChhdmF0YXIpID0+IHtcclxuICAgICAgICBlZGl0QXZhdGFyUG9wdXAuc2V0QnV0dG9uVGV4dCh0cnVlKVxyXG4gICAgICAgIHVzZXJJbmZvQ2xhc3Muc2V0VXNlckluZm8oYXZhdGFyKVxyXG4gICAgICAgIHVzZXJJbmZvQ2xhc3MudXBkYXRhVXNlckF2YXRhcigpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ9Cn0YLQvi3RgtC+INGB0LvQvtC80LDQu9C+0YHRjCEnKVxyXG4gICAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgIGVkaXRBdmF0YXJQb3B1cC5zZXRCdXR0b25UZXh0KGZhbHNlKVxyXG4gICAgICAgIGVkaXRBdmF0YXJQb3B1cC5jbG9zZShwb3B1cEF2YXRhcikgLy/Qt9Cw0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDQsNCy0LDRgtCw0YDQsCDQv9GA0L7RhNC40LvRj1xyXG59KVxyXG59KVxyXG5cclxuXHJcbi8v0JLQsNC70LjQtNCw0YbQuNC4XHJcbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWdWYWxpZGF0aW9uLCBlZGl0QXZhdGFyRm9ybSlcclxuYXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7ICAvL9CS0LDQu9C40LTQsNGG0LjRjyDRhNC+0YDQvNGLINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LDQstCw0YLQsNGA0LBcclxuXHJcbmNvbnN0IHByb2ZpbGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgZWRpdFByb2ZpbGVGb3JtKTtcclxucHJvZmlsZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpOyAvL9CS0LDQu9C40LTQsNGG0LjRjyDRhNC+0YDQvNGLINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0L/RgNC+0YTQuNC70Y9cclxuXHJcbmNvbnN0IGFkZENhcmRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnVmFsaWRhdGlvbiwgZWRpdE5ld0NhcmRGb3JtKTtcclxuYWRkQ2FyZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpOyAvL9CS0LDQu9C40LTQsNGG0LjRjyDRhNC+0YDQvNGLINC00L7QsdCw0LLQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60LhcclxuXHJcbi8v0KHQvtCx0YvRgtC40Y9cclxuLy/QntGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC/0YDQvtGE0LjQu9GPXHJcbmVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50VXNlckluZm8gPSB1c2VySW5mb0NsYXNzLmdldFVzZXJJbmZvKCk7XHJcbiAgICBuYW1lSW5wdXQudmFsdWUgPSBjdXJyZW50VXNlckluZm8ubmFtZTtcclxuICAgIGpvYklucHV0LnZhbHVlID0gY3VycmVudFVzZXJJbmZvLmFib3V0OyBcclxuICAgIGVkaXRQcm9maWxlUG9wdXAub3BlbigpXHJcbiAgICBjb25zb2xlLmxvZyhjdXJyZW50VXNlckluZm8ubmFtZUlucHV0KVxyXG59KTtcclxuLy/QntGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmJ1dHRvbk9wZW5Qb3B1cENhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBhZGRDYXJkRm9ybVZhbGlkYXRvci5zZXRTdWJtaXRCdXR0b25TdGF0ZSgpXHJcbiAgICAgYWRkQ2FyZFBvcHVwLm9wZW4obmV3Q2FyZFBvcHVwKSB9KTtcclxuLy85INCe0YLQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwINGB0LzQtdC90Ysg0LDQstCw0YLQsNGA0LBcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX3JlZGFjdC1pbWcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRVc2VyQXZhdGFyID0gdXNlckluZm9DbGFzcy5nZXRVc2VyQXZhdGFyKCk7XHJcbiAgICBhdmF0YXJJbnB1dC52YWx1ZSA9IGN1cnJlbnRVc2VyQXZhdGFyLmF2YXRhcjtcclxuICAgIGVkaXRBdmF0YXJQb3B1cC5vcGVuKHBvcHVwQXZhdGFyKTtcclxufSk7XHJcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycyhuZXdDYXJkUG9wdXApO1xyXG5wb3B1cFdpdGhJbWFnZUNsYXNzLnNldEV2ZW50TGlzdGVuZXJzKHBvcHVwSW1nT3Blbik7XHJcbmVkaXRQcm9maWxlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMocHJvZmlsZVBvcHVwKTtcclxuZWRpdEF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKHBvcHVwQXZhdGFyKTsgICAvLzlcclxucG9wdXBXaXRoU3VibWl0Q2xhc3Muc2V0RXZlbnRMaXN0ZW5lcnMocG9wdXBEZWxldGVDYXJkKSAvLzkiXSwic291cmNlUm9vdCI6IiJ9