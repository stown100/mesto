(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{wg:()=>b,xA:()=>d,Cs:()=>v,C_:()=>n,iu:()=>r,yk:()=>s,CW:()=>i,oW:()=>o,bj:()=>h,O9:()=>p,ON:()=>y,N_:()=>a,Ht:()=>u,qj:()=>m,f:()=>g,Ph:()=>f,t1:()=>l,Ag:()=>c,ZQ:()=>_});var n={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_invalid",inputErrorClass:"form__input-border-error",errorClass:"form__input"},r=document.querySelector('.form[name = "formRedactAvatar"]'),o=document.querySelector('.form[name = "formRedactProfile"]'),i=document.querySelector('.form[name = "formNewCard"]'),u=document.querySelector(".popup_delete"),a=document.querySelector(".popup_avatar"),c=document.querySelector(".profile__title"),l=document.querySelector(".profile__subtitle"),s=document.querySelector(".profile__edit-button"),f=document.querySelector(".popup_profile"),p=document.querySelector(".form__input_type_name"),h=document.querySelector(".form__input_type_role"),d=document.querySelector(".profile__vector-button"),y=document.querySelector(".popup_images"),_=document.querySelector(".elements"),m=document.querySelector(".popup_img"),v="#tmplt",b=document.querySelector(".form__input_type_avatar"),g=document.querySelector(".profile__jack");function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._configValidation=t,this._formSelector=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._formSelector.addEventListener("submit",(function(e){e.preventDefault()})),this._handleFormInput()}},{key:"_handleFormInput",value:function(){var e=this;this._inputList=Array.from(this._formSelector.querySelectorAll(this._configValidation.inputSelector)),this.setSubmitButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._setCastomError(t),e.setSubmitButtonState()}))}))}},{key:"_setCastomError",value:function(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}},{key:"_setFieldError",value:function(e){this._formSelector.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage}},{key:"_showError",value:function(e){this._setFieldError(e),e.classList.add(this._configValidation.inputErrorClass)}},{key:"_hideError",value:function(e){this._setFieldError(e),e.classList.remove(this._configValidation.inputErrorClass)}},{key:"setSubmitButtonState",value:function(){this._button=this._formSelector.querySelector(this._configValidation.submitButtonSelector);var e=this._formSelector.checkValidity();e&&(this._button.classList.remove(this._configValidation.inactiveButtonClass),this._button.removeAttribute("disabled")),e||(this._button.classList.add(this._configValidation.inactiveButtonClass),this._button.setAttribute("disabled","disabled"))}}])&&S(t.prototype,n),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(){function e(t,n,r,o,i,u){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),E(this,"createCard",(function(){return a._element=a._getTemplate(),a._removeButtonDelete(a),a._setEventListeners(),a.setLikeCard(a),a._element.querySelector(".element__img").src=a._link,a._element.querySelector(".element__img").alt=a._name,a._element.querySelector(".element__title").textContent=a._name,a._element})),E(this,"deleteCard",(function(){return a._popupDeleteCard(a)})),E(this,"removeCard",(function(){a._element.remove()})),E(this,"setLikeCard",(function(e){var t=e.likes;t&&(a._likes=t),a._isLiked=Boolean(a._likes.some((function(e){return e._id===a._myId}))),a._elementLike.textContent=a._likes.length,a._isLiked?a._elementGroup.classList.add("element__group_active"):a._elementGroup.classList.remove("element__group_active")})),E(this,"hendleCardLike",(function(){return a._hendleCardLike(a)})),this._name=t.name,this._link=t.link,this._cardSelector=n,this._open=r,this._popupDeleteCard=o,this._cardId=t._id,this._owner=t.owner._id,this._likes=t.likes,this._hendleCardLike=i,this._myId=u,console.log(this._likes)}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return this._element=document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._elementGroup=this._element.querySelector(".element__group"),this._elementGroup.addEventListener("click",this.hendleCardLike),this._element.querySelector(".element__img").addEventListener("click",(function(){e._open()})),this._element.querySelector(".element__delete").addEventListener("click",this.deleteCard),this._elementLike=this._element.querySelector(".element__like_number")}},{key:"_removeButtonDelete",value:function(){this._owner!==this._myId&&(this._element.querySelector(".element__delete").style.display="none")}},{key:"isLiked",value:function(){return this._isLiked}},{key:"cardId",value:function(){return this._cardId}}])&&w(t.prototype,n),e}();function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._sectionElement=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(e){this._sectionElement.prepend(e)}}])&&O(t.prototype,n),e}();function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("click",(function(t){t.target===t.currentTarget&&e.close()}))}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}}])&&j(t.prototype,n),e}();function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t,n){return(R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=B(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t){return!t||"object"!==T(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function B(e){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=B(r);if(o){var n=B(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return x(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupCardImage=t._popup.querySelector(".popup__img"),t._captionImage=t._popup.querySelector(".popup__title"),t}return t=u,(n=[{key:"open",value:function(e,t){R(B(u.prototype),"open",this).call(this),this._popupCardImage.alt=e,this._captionImage.textContent=e,this._popupCardImage.src=t}}])&&q(t.prototype,n),u}(P);function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return(D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=J(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function J(e){return(J=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=J(r);if(o){var n=J(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._saveNewCard=t,n._buttonSubmit=n._popup.querySelector(".form__button"),n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;D(J(u.prototype),"setEventListeners",this).call(this,this._popup),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._saveNewCard(e._getInputValues())}))}},{key:"close",value:function(){D(J(u.prototype),"close",this).call(this,this._popup),this._popup.querySelector(".form").reset()}},{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._popup.querySelectorAll(".form__input"),this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setButtonText",value:function(e){this._buttonSubmit.textContent=e?"Сохранение...":"Сохранить"}}])&&U(t.prototype,n),u}(P);function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=t,this._profileJob=n,this._profileAvatar=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,about:this._profileJob.textContent}}},{key:"getUserAvatar",value:function(){return{avatar:this._profileAvatar.src}}},{key:"setUserInfo",value:function(e,t){e&&(this._profileName.textContent=e),t&&(this._profileJob.textContent=t)}},{key:"serUserAvatar",value:function(e){e&&(this._profileAvatar.src=e)}}])&&M(t.prototype,n),e}();function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=function(){function e(t){var n,r,o=t.url,i=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},(n="_handleResponse")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this.url=o,this.headers=i}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this.url,"/cards"),{method:"GET",headers:this.headers}).then(this._handleResponse)}},{key:"addTask",value:function(e){return fetch("".concat(this.url,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"deleteTask",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then(this._handleResponse)}},{key:"getUserInfo",value:function(){return fetch("".concat(this.url,"/users/me"),{headers:this.headers}).then(this._handleResponse)}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this.url,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:n})}).then(this._handleResponse)}},{key:"setUserAvatar",value:function(e){return fetch("".concat(this.url,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"likeCard",value:function(e,t){return fetch("".concat(this.url,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this.headers}).then(this._handleResponse)}}])&&W(t.prototype,n),e}();function Q(e){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t,n){return($="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ee(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e,t){return!t||"object"!==Q(t)&&"function"!=typeof t?Y(e):t}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e){return(ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ee(r);if(o){var n=ee(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return X(this,e)});function u(e,t){var n,r,o,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a=function(e){n._handleFormSubmit=e},(o="setFormSubmit")in(r=Y(n=i.call(this,e)))?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,n._handleFormSubmit=t,n._buttonSubmit=n._popup.querySelector(".form__button"),n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e)})),$(ee(u.prototype),"setEventListeners",this).call(this)}},{key:"setButtonText",value:function(e){this._buttonSubmit.textContent=e?"Удаление...":"Да"}}])&&Z(t.prototype,n),u}(P);function ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var re=new z({url:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{authorization:"4187936b-f13d-40c6-aac3-45e4140019db","Content-Type":"application/json"}}),oe=null;Promise.all([re.getUserInfo(),re.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ne(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];oe=o._id,c.textContent=o.name,l.textContent=o.about,g.src=o.avatar,i.forEach((function(e){ce(e)}))}));var ie=new G(y,(function(e){re.addTask({name:e.title,link:e.link}).then((function(e){ie.setButtonText(!0),ce(e),ie.close(y)})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){ie.setButtonText(!1)}))})),ue=new L({items:t.initialCards,renderer:ce},_),ae=new A(m);function ce(e){var t;t=new C(e,v,(function(){ae.open(e.name,e.link)}),fe,le,oe).createCard(),ue.addItem(t)}function le(e){re.likeCard(e.cardId(),e.isLiked()).then((function(t){e.setLikeCard(t)})).catch((function(){console.log("Что-то сломалось!")}))}var se=new te(u,fe);function fe(e){se.open(),se.setFormSubmit((function(){re.deleteTask(e._cardId).then((function(){se.setButtonText(!0),e.removeCard(),se.close(u)})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){se.setButtonText(!1)}))}))}se.setEventListeners();var pe=new H(c,l,g),he=new G(f,(function(e){var t=e.name,n=e.about;re.setUserInfo({name:t,about:n}).then((function(e){he.setButtonText(!0),pe.setUserInfo(e.name,e.about),he.close(f)})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){he.setButtonText(!1)}))})),de=new G(a,(function(e){re.setUserAvatar(e).then((function(e){de.setButtonText(!0),pe.serUserAvatar(e.avatar),de.close(a)})).catch((function(){console.log("Что-то сломалось!")})).finally((function(){de.setButtonText(!1)}))}));new k(n,r).enableValidation(),new k(n,o).enableValidation();var ye=new k(n,i);ye.enableValidation(),s.addEventListener("click",(function(){var e=pe.getUserInfo();p.value=e.name,h.value=e.about,he.open()})),d.addEventListener("click",(function(){ye.setSubmitButtonState(),ie.open(y)})),document.querySelector(".profile__redact-img").addEventListener("click",(function(){var e=pe.getUserAvatar();b.value=e.avatar,de.open(a)})),ie.setEventListeners(y),ae.setEventListeners(m),he.setEventListeners(f),de.setEventListeners(a),se.setEventListeners(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,